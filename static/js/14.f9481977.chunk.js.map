{"version":3,"sources":["api/server.js","constants/ManageServer/server.js","features/ManageServer/slice.js"],"names":["getAllServerApi","Promise","resolve","reject","axios","method","url","then","res","data","catch","error","getServersApi","get","params","pageNumber","current","pageSize","sortColumn","sortOrder","keyword","filterColumn","filterKeys","createServerApi","post","serverName","ipAddress","startDate","endDate","updateServerApi","put","Id","id","Name","IpAddress","StartDate","EndDate","IsActive","status","deleteServerApi","delete","updateMultipleStatusApi","listServer","exportServerListApi","serverIpList","ipAddressList","importServerListApi","recoverServerApi","SERVER_CONSTANTS","ADD_SERVER_REQUEST","type","ADD_SERVER_TYPE","UPDATE_SERVER_TYPE","DEFAULT_FILTER_KEYS","DEFAULT_FILTER_COLUMN","DEFAULT_SORT_COLUMN","DEFAULT_SORT_ORDER","SERVER_EXPORT_FILE","initialState","blockIds","refresh","lstServer","slice","createSlice","name","reducers","setFilter","state","action","payload","setSort","setData","setRefresh","setListServer","actions","getListServerOptions","dispatch","console","log"],"mappings":"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","file":"static/js/14.f9481977.chunk.js","sourcesContent":["import axios from \"axios/auth.instance\";\r\n// const FormData = require('form-data');\r\n\r\nexport const getAllServerApi = () => {\r\n  return new Promise((resolve, reject) => {\r\n    return axios({\r\n      method: \"get\",\r\n      url: \"/api/servers/all\",\r\n    })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const getServersApi = (data) => {\r\n  //console.log(\"Send params\", data);\r\n  return new Promise((resolve, reject) => {\r\n    return axios\r\n      .get(`/api/servers`, {\r\n          params: {\r\n              pageNumber: data.current,\r\n              pageSize: data.pageSize,\r\n              sortColumn: data.sortColumn,\r\n              sortOrder: data.sortOrder,\r\n              keyword: data.keyword,\r\n              filterColumn: data.filterColumn,\r\n              filterKeys: data.filterKeys\r\n          }\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n\r\nexport const createServerApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    return axios\r\n      .post(`/api/servers`, {\r\n          serverName: data.serverName,\r\n          ipAddress: data.ipAddress,\r\n          startDate: data.startDate,\r\n          endDate: data.endDate\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  }); \r\n}\r\n\r\n\r\nexport const updateServerApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    //console.log(\"Send data\", data)\r\n    return axios\r\n      .put(`/api/servers`, {\r\n          Id: data.id,\r\n          Name: data.serverName,\r\n          IpAddress: data.ipAddress,\r\n          StartDate: data.startDate,\r\n          EndDate: data.endDate,\r\n          IsActive: data.status\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });  \r\n}\r\n\r\nexport const deleteServerApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    //console.log(\"Delete data\", data)\r\n    return axios\r\n      .delete(`/api/servers`, {\r\n          params: {\r\n              id: data.id\r\n          }\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport const updateMultipleStatusApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    //console.log(\"Send data\", data)\r\n    return axios\r\n      .put(`/api/servers/multi`, {\r\n          status: data.status,\r\n          listServer: data.listServer\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });  \r\n}\r\n\r\n\r\nexport const exportServerListApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    //console.log(\"Data for export\", data);\r\n    return axios\r\n      .get(`/api/servers/export`, {\r\n          params: {\r\n            serverName: data.serverName,\r\n            serverIpList: data.ipAddressList,\r\n            startDate: data.startDate,\r\n            endDate: data.endDate,\r\n            filterColumn: data.filterColumn,\r\n            filterKeys: data.filterKeys\r\n          }\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport const importServerListApi = (data) => {\r\n  //console.log(data);\r\n  return new Promise((resolve, reject) => {\r\n    return axios\r\n      .post(`/api/servers/import`, {\r\n        listServer : data.data\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  }); \r\n}\r\n\r\n\r\nexport const recoverServerApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    //console.log(\"Recover data\", data)\r\n    return axios\r\n      .put(`/api/servers/recover`, {\r\n          id: data.id\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}","export const SERVER_CONSTANTS = {\r\n    ADD_SERVER_REQUEST: {\r\n        type: 'add',\r\n        data: null\r\n    },\r\n    ADD_SERVER_TYPE: 'add',\r\n    UPDATE_SERVER_TYPE: 'update',\r\n    DEFAULT_FILTER_KEYS: '1,0',\r\n    DEFAULT_FILTER_COLUMN: 'Status',\r\n    DEFAULT_SORT_COLUMN: 'Name',\r\n    DEFAULT_SORT_ORDER: 'ascend',\r\n    SERVER_EXPORT_FILE: 'Server_list'\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { SERVER_CONSTANTS } from \"constants/ManageServer/server\";\r\nimport { getAllServerApi } from \"api/server\";\r\nexport const initialState = {\r\n  blockIds: null,\r\n  sortColumn: SERVER_CONSTANTS.DEFAULT_SORT_COLUMN,\r\n  sortOrder: SERVER_CONSTANTS.DEFAULT_SORT_ORDER,\r\n  data: [], \r\n  refresh: false,\r\n  lstServer: []\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"serverManagement\",\r\n  initialState,\r\n  reducers: {\r\n    setFilter: (state, action) => {\r\n      state.blockIds = action.payload.blockIds;\r\n    },\r\n\r\n    setSort: (state, action) => {\r\n      state.sortColumn = action.payload.sortColumn;\r\n      state.sortOrder = action.payload.sortOrder;\r\n    },\r\n\r\n    setData:  (state, action) => {\r\n      state.data = action.payload.data;\r\n    },\r\n\r\n\r\n    setRefresh: (state, action) => {\r\n      state.refresh = action.payload\r\n    },\r\n\r\n    setListServer: (state, action) => {\r\n      state.lstServer = action.payload.lstServer;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setFilter, setSort, setData, setRefresh, setListServer } = slice.actions;\r\nexport default slice.reducer;\r\n\r\n\r\nexport const getListServerOptions = () => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    return getAllServerApi()\r\n      .then((res) => {\r\n        console.log(res);\r\n        dispatch(setListServer({ lstServer: res.data }));\r\n        resolve(res);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n"],"sourceRoot":""}