{"version":3,"sources":["features/UserSetting/slice.js","components/UserSetting/UploadAvatarDynamic.js","components/UserSetting/UserSettingForm.js","components/UserSetting/UserSettingPasswordForm.js","features/UserSetting/pages/Main/index.js","features/UserSetting/index.js"],"names":["initialState","record","slice","createSlice","name","reducers","setRecord","state","action","payload","actions","UploadAvatarDynamic","pross","dispatch","useDispatch","useState","token","setToken","useSelector","app","username","avatar","fileList","useEffect","tokens","checkToken","onsub","beforeCrop","file","isJpgOrPng","type","message","error","isLt2M","size","rotate","process","headers","Authorization","onChange","console","log","getAccountDetailApi","then","res","setua","data","AvatarPath","status","success","statusText","catch","length","style","padding","src","formItemLayout","labelCol","span","wrapperCol","UserSetting","pros","Form","useForm","form","id","setId","setImageUrl","userSetting","UserName","UserId","setFieldsValue","onFinish","values","updateAccountApi","FirstName","trim","LastName","onSubmitModal","Item","justify","align","label","rules","required","disabled","pattern","title","QuestionCircleOutlined","whitespace","offset","htmlType","UserSettingPassword","updateAccountPassApi","PassWord","password","resetFields","min","hasFeedback","Password","dependencies","getFieldValue","validator","rule","value","Promise","reject","resolve","MainPage","setLoading","refetch","fetch","User","match","useRouteMatch","fallback","exact","path","url","component","NotFound"],"mappings":"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","file":"static/js/12.42d5bbd1.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const initialState = {\r\n  record: {},\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"userSetting\",\r\n  initialState,\r\n  reducers: {\r\n    setRecord: (state, action) => {\r\n      state.record = action.payload.record;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setRecord } = slice.actions;\r\nexport default slice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Upload, Button, Avatar, message } from \"antd\";\r\nimport ImgCrop from \"antd-img-crop\";\r\nimport { checkToken } from \"utils/localstorage\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getAccountDetailApi } from \"api/user\";\r\nimport { setua } from \"features/App/slice\";\r\n// const token = checkToken();\r\n\r\nconst UploadAvatarDynamic = (pross) => {\r\n  const dispatch = useDispatch();\r\n  const [token, setToken] = useState(\"\");\r\n  const { username, avatar } = useSelector((state) => state.app);\r\n  const [fileList, setFileList] = useState([\r\n    // {\r\n    //   uid: '-1',\r\n    //   name: 'image.png',\r\n    //   status: 'done',\r\n    //   url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n    // },\r\n  ]);\r\n  // const sleep = (milliseconds) => {\r\n  //   return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  // };\r\n  useEffect(() => {\r\n    const tokens = checkToken();\r\n    setToken(tokens);\r\n    // await sleep(500);\r\n    pross.onsub();\r\n  }, []);\r\n  const onChange = ({ fileList: newFileList }) => {\r\n    // setFileList(newFileList);\r\n    console.log(`Bearer ${token}`);\r\n    pross.onsub();\r\n    getAccountDetailApi()\r\n      .then((res) => {\r\n        dispatch(setua({username: username, avatar: res.data.AvatarPath }));\r\n        if (res.status === 200) {\r\n          message.success(res.statusText);\r\n        } else {\r\n          message.error(res.statusText);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.data.message);\r\n      });\r\n  };\r\n\r\n  const onPreview = async (file) => {\r\n    let src = file.url;\r\n    if (!src) {\r\n      src = await new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file.originFileObj);\r\n        reader.onload = () => resolve(reader.result);\r\n      });\r\n    }\r\n    const image = new Image();\r\n    image.src = src;\r\n    const imgWindow = window.open(src);\r\n    imgWindow.document.write(image.outerHTML);\r\n  };\r\n\r\n  function beforeUpload(file) {\r\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n    if (!isJpgOrPng) {\r\n      message.error('You can only upload JPG/PNG file!');\r\n    }\r\n    const isLt2M = file.size / 1024 / 1024 < 10;\r\n    if (!isLt2M) {\r\n      message.error('Image must smaller than 10MB!');\r\n    }\r\n    return isJpgOrPng && isLt2M;\r\n  }\r\n\r\n  return (\r\n    <ImgCrop beforeCrop={beforeUpload} rotate>\r\n      <Upload\r\n        action={process.env.REACT_APP_BASE_URL+\"/api/users/avatar\"}\r\n        headers={{ Authorization: `Bearer ${token}` }}\r\n        // listType=\"picture-card\"\r\n        fileList={fileList}\r\n        onChange={onChange}\r\n        // onPreview={onPreview}\r\n      >\r\n        {fileList.length < 1 && (<Avatar size={150} style={{ padding: 0 }} src={`${process.env.REACT_APP_BASE_URL}/api/users/${avatar}`} />)}\r\n      </Upload>\r\n    </ImgCrop>\r\n  );\r\n};\r\n\r\nexport default UploadAvatarDynamic;\r\n","import {\r\n  Form,\r\n  Switch,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Avatar,\r\n  Input,\r\n  Tooltip,\r\n  message,\r\n  Descriptions,\r\n} from \"antd\";\r\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { updateAccountApi } from \"../../api/user\";\r\nimport UploadAvatarDynamic from \"../../components/UserSetting/UploadAvatarDynamic.js\";\r\nimport { setua } from \"features/App/slice\";\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 6,\r\n  },\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\n\r\nconst UserSetting = (pros) => {\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const [id, setId] = useState();\r\n  const [imageUrl, setImageUrl] = useState(\r\n    \"https://f1.pngfuel.com/png/386/684/972/face-icon-user-icon-design-user-profile-share-icon-avatar-black-and-white-silhouette-png-clip-art.png\"\r\n  );\r\n  const { record } = useSelector((state) => state.userSetting);\r\n  const [switchState, setSwitchState] = useState(true);\r\n  function onChange(checked) {\r\n    console.log(`switch to ${checked}`);\r\n    setSwitchState(checked);\r\n  }\r\n  const onFinish = (values) => {\r\n    console.log(\"Received values of form: \", values);\r\n    console.log(\"id\", id);\r\n    updateAccountApi({\r\n      ...values,\r\n      UserId: id,\r\n      FirstName: values.FirstName.trim(),\r\n      LastName: values.LastName.trim(),\r\n    })\r\n      .then((res) => {\r\n        console.log(\"res from update account\", res);\r\n        if (res.status === 200) {\r\n          message.success(res.statusText);\r\n        }\r\n        pros.onSubmitModal();\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.data.message);\r\n      });\r\n    pros.onSubmitModal();\r\n  };\r\n  useEffect(() => {\r\n    dispatch(setua({ username: record.UserName, avatar: record.AvatarPath }));\r\n    if (record.AvatarPath) {\r\n      setImageUrl(\r\n        process.env.REACT_APP_BASE_URL + \"/api/users/\" + record.AvatarPath\r\n      );\r\n    } else {\r\n      setImageUrl(\r\n        \"https://f1.pngfuel.com/png/386/684/972/face-icon-user-icon-design-user-profile-share-icon-avatar-black-and-white-silhouette-png-clip-art.png\"\r\n      );\r\n    }\r\n    setId(record.UserId);\r\n    form.setFieldsValue(record);\r\n  }, [record]);\r\n  const fetch = () => {};\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"validate_other\"\r\n      {...formItemLayout}\r\n      onFinish={onFinish}\r\n    >\r\n      <Form.Item>\r\n        <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n          <Col span={8}></Col>\r\n          <Col span={8}>\r\n            {/* <Row>\r\n              <Avatar size={150} style={{ padding: 0 }} src={imageUrl} />\r\n            </Row> */}\r\n            <Row>\r\n              <UploadAvatarDynamic onsub={pros.onSubmitModal} />\r\n            </Row>\r\n          </Col>\r\n          <Col span={8}></Col>\r\n\r\n          {/* <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\r\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n          </Upload> */}\r\n        </Row>\r\n      </Form.Item>\r\n\r\n      {/* <Form.Item\r\n        name=\"UserId\"\r\n        label=\"ID\"\r\n        rules={[\r\n          {\r\n            message: \"Please input your ID!\",\r\n            whitespace: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input disabled={true} />\r\n      </Form.Item> */}\r\n      <Form.Item\r\n        name=\"Email\"\r\n        label=\"E-mail\"\r\n        rules={[\r\n          {\r\n            type: \"email\",\r\n            message: \"The input is not valid E-mail!\",\r\n          },\r\n          {\r\n            required: true,\r\n            message: \"Please input your E-mail!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input disabled={true} />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"FirstName\"\r\n        label=\"First Name\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input Firstname!\",\r\n          },\r\n          {\r\n            pattern: \"(?=[0-9a-zA-Z](.*))\",\r\n            message: \"Firstname must not null\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"LastName\"\r\n        label=\"Last Name\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input Lastname!\",\r\n          },\r\n          {\r\n            pattern: \"(?=[0-9a-zA-Z](.*))\",\r\n            message: \"Lastname must not null\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      {/* <Form.Item\r\n        name=\"Pass\"\r\n        label=\"Old Password\"\r\n        rules={[\r\n          {\r\n            // required: true,\r\n            message: \"Please input your old password!\",\r\n          },\r\n        ]}\r\n        hasFeedback\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"password\"\r\n        label=\"New Password\"\r\n        rules={[\r\n          {\r\n            message: \"Please input your password!\",\r\n          },\r\n        ]}\r\n        hasFeedback\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"confirm\"\r\n        label=\"Confirm Password\"\r\n        dependencies={[\"password\"]}\r\n        hasFeedback\r\n        rules={[\r\n          {\r\n            message: \"Please confirm your password!\",\r\n          },\r\n          ({ getFieldValue }) => ({\r\n            validator(rule, value) {\r\n              if (!value || getFieldValue(\"password\") === value) {\r\n                return Promise.resolve();\r\n              }\r\n              return Promise.reject(\r\n                \"The two passwords that you entered do not match!\"\r\n              );\r\n            },\r\n          }),\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item> */}\r\n\r\n      <Form.Item\r\n        name=\"UserName\"\r\n        label={\r\n          <span>\r\n            Username&nbsp;\r\n            <Tooltip title=\"What do you want others to call you?\">\r\n              <QuestionCircleOutlined />\r\n            </Tooltip>\r\n          </span>\r\n        }\r\n        rules={[\r\n          {\r\n            message: \"Please input your username!\",\r\n            whitespace: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input disabled={true} />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"RoleName\"\r\n        label=\"Role permission\"\r\n        rules={[\r\n          {\r\n            message: \"Please input your role name!\",\r\n            whitespace: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input disabled={true} />\r\n      </Form.Item>\r\n\r\n      {/* <Form.Item name=\"IsActive\" label=\"Status\">\r\n        <Switch\r\n          disabled={true}\r\n          checkedChildren=\"Active\"\r\n          unCheckedChildren=\"InActive\"\r\n          defaultChecked={switchState}\r\n          onChange={onChange}\r\n        />\r\n      </Form.Item> */}\r\n\r\n      <Form.Item\r\n        wrapperCol={{\r\n          span: 12,\r\n          offset: 6,\r\n        }}\r\n      >\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Apply New Change\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UserSetting;\r\n","import {\r\n  Form,\r\n  Switch,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Avatar,\r\n  Input,\r\n  Tooltip,\r\n  message,\r\n} from \"antd\";\r\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { updateAccountPassApi } from \"../../api/user\";\r\nimport UploadAvatarDynamic from \"./UploadAvatarDynamic.js\";\r\nimport { setua } from \"features/App/slice\";\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 6,\r\n  },\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\n\r\nconst UserSettingPassword = (pros) => {\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const [id, setId] = useState();\r\n  const [imageUrl, setImageUrl] = useState(\r\n    \"https://f1.pngfuel.com/png/386/684/972/face-icon-user-icon-design-user-profile-share-icon-avatar-black-and-white-silhouette-png-clip-art.png\"\r\n  );\r\n  const { record } = useSelector((state) => state.userSetting);\r\n  const [switchState, setSwitchState] = useState(true);\r\n  function onChange(checked) {\r\n    console.log(`switch to ${checked}`);\r\n    setSwitchState(checked);\r\n  }\r\n  const onFinish = (values) => {\r\n    console.log(\"Received values of form: \", values);\r\n    updateAccountPassApi({\r\n      ...values,\r\n      PassWord: values.password,\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          message.success(res.statusText);\r\n        } else {\r\n          message.error(res.statusText);\r\n        }\r\n        pros.onSubmitModal();\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.data.message);\r\n      });\r\n      form.resetFields();\r\n    pros.onSubmitModal();\r\n  };\r\n  useEffect(() => {\r\n    dispatch(setua({ username: record.UserName, avatar: record.AvatarPath }));\r\n    if (record.AvatarPath) {\r\n      setImageUrl(\r\n        process.env.REACT_APP_BASE_URL + \"/api/users/\" + record.AvatarPath\r\n      );\r\n    } else {\r\n      setImageUrl(\r\n        \"https://f1.pngfuel.com/png/386/684/972/face-icon-user-icon-design-user-profile-share-icon-avatar-black-and-white-silhouette-png-clip-art.png\"\r\n      );\r\n    }\r\n    setId(record.UserId);\r\n    form.setFieldsValue(record);\r\n  }, [record]);\r\n  const fetch = () => {};\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"validate_other\"\r\n      {...formItemLayout}\r\n      onFinish={onFinish}\r\n    >\r\n      <Form.Item\r\n        name=\"Pass\"\r\n        label=\"Old Password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your old password!\",\r\n          },\r\n          { min: 5, message: \"Password must be minimum 5 characters.\" },\r\n          {\r\n            pattern: \"(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])\",\r\n            message:\r\n              \"Password must include number, uppercase and lowercase character\",\r\n          },\r\n        ]}\r\n        hasFeedback\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"password\"\r\n        label=\"New Password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your password!\",\r\n          },\r\n          { min: 5, message: \"Password must be minimum 5 characters.\" },\r\n          {\r\n            pattern: \"(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])\",\r\n            message:\r\n              \"Password must include number, uppercase and lowercase character\",\r\n          },\r\n        ]}\r\n        hasFeedback\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"confirm\"\r\n        label=\"Confirm Password\"\r\n        dependencies={[\"password\"]}\r\n        hasFeedback\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please confirm your password!\",\r\n          },\r\n          ({ getFieldValue }) => ({\r\n            validator(rule, value) {\r\n              if (!value || getFieldValue(\"password\") === value) {\r\n                return Promise.resolve();\r\n              }\r\n              return Promise.reject(\r\n                \"The two passwords that you entered do not match!\"\r\n              );\r\n            },\r\n          }),\r\n          { min: 5, message: \"Password must be minimum 5 characters.\" },\r\n          {\r\n            pattern: \"(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])\",\r\n            message:\r\n              \"Password must include number, uppercase and lowercase character\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n      <Form.Item\r\n        wrapperCol={{\r\n          span: 12,\r\n          offset: 6,\r\n        }}\r\n      >\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Change Password\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UserSettingPassword;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport \"./index.scss\";\r\nimport UserSetting from \"../../../../components/UserSetting/UserSettingForm.js\";\r\nimport UserSettingPassword from \"../../../../components/UserSetting/UserSettingPasswordForm.js\";\r\nimport { getAccountDetailApi } from \"api/user\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setRecord } from \"../../slice\";\r\n\r\nMainPage.propTypes = {};\r\n\r\nfunction MainPage() {\r\n  const dispatch = useDispatch();\r\n  const [loading, setLoading] = useState(false);\r\n  const { record } = useSelector((state) => state.userSetting);\r\n  useEffect(() => {\r\n    refetch();\r\n  }, []);\r\n\r\n  function refetch() {\r\n    fetch();\r\n  }\r\n  var newdata;\r\n  const fetch = () => {\r\n    setLoading(true);\r\n    return getAccountDetailApi()\r\n      .then((res) => {\r\n        setLoading(false);\r\n        dispatch(setRecord({ record: res.data }));\r\n        if (res.status === 200) {\r\n          // message.success(res.statusText);\r\n        } else {\r\n          message.error(res.statusText);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.data.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UserSetting onSubmitModal={refetch} />\r\n      <UserSettingPassword onSubmitModal={refetch} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Suspense } from \"react\";\r\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport \"./index.scss\";\r\n\r\nimport NotFound from \"../../components/NotFound\";\r\nimport MainPage from \"./pages/Main\";\r\n\r\nUser.propTypes = {};\r\n\r\nfunction User() {\r\n  const match = useRouteMatch();\r\n  return (\r\n    <Suspense fallback={<div>Loading ...</div>}>\r\n      <Switch>\r\n        <Route exact path={match.url} component={MainPage} />\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default User;\r\n"],"sourceRoot":""}