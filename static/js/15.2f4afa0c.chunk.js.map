{"version":3,"sources":["api/customer.js","features/ManageCustomer/slice.js"],"names":["getCustomerApi","data","Promise","resolve","reject","checkToken","axios","get","params","then","res","catch","error","createCustomerApi","post","getContactPointsApi","deleteCustomerApi","delete","deleteCustomersApi","put","deactiveCustomersApi","activeCustomersApi","updateCustomerApi","newData","id","getServersCustomerApi","keyword","Id","getOtherServersApi","option","page","deleteServersOfCustomerApi","deletedServers","customerId","DeletedServers","addServersForCustomerApi","addedServers","AddedServers","exportCustomerListApi","CustomerName","customerName","ContactPoint","contactPoint","ContractBeginDate","startDate","ContractEndDate","endDate","IsActive","status","importCustomerListApi","CustomerList","initialState","deletedData","servers","loading","hasMore","total","totalServers","otherServers","pagination","current","pageSize","deletedOwnedServers","sortColumn","sortOrder","filterValue","refresh","contactPoints","slice","createSlice","name","reducers","setData","state","action","payload","setPagination","setSort","setSearch","setFilter","setRefresh","setContactPointList","setServers","setOtherServers","setDeletedOwnedServers","setAddedServers","setLoading","setDeletedData","actions","getCustomerList","dispatch","Total","console","log","getContactPointList","getServersCustomer","getState","length","getOtherServers","customerManagement","concat","deleteServersOfCustomer","addServersForCustomer"],"mappings":"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","file":"static/js/15.2f4afa0c.chunk.js","sourcesContent":["import axios from \"axios/auth.instance\";\r\nimport { checkToken } from \"utils/localstorage\";\r\n\r\nexport const listCustomerApi = () => {\r\n  return new Promise((resolve, reject) => {\r\n    return axios({\r\n      method: \"get\",\r\n      url: \"/unknown\",\r\n    })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\nexport const getDeletedCustomerApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .get(\"/customers/deleted\", {\r\n        params: data,\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\nexport const getCustomerApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .get(\"/customers\", {\r\n        params: data,\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const createCustomerApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .post(\"/customers\", data)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const getContactPointsApi = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .get(\"/customers/contactPoints\")\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const deleteCustomerApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .delete(\"/customers\", {\r\n        params: data,\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\nexport const deleteCustomersApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .put(\"/customers/delete-multi\", {\r\n        params: data,\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\nexport const deactiveCustomersApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .put(\"/customers/deactive-multi\", {\r\n        params: data,\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\nexport const activeCustomersApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .put(\"/customers/active-multi\", {\r\n        params: data,\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const updateCustomerApi = (newData, id) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .put(\r\n        \"/customers\" + `?Id=${id}`,\r\n        newData\r\n      )\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const getServersCustomerApi = (id, keyword) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .get(\"/customers/servers\", {\r\n        params: { Id: id, keyword: keyword },\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const getOtherServersApi = (option, id, page, keyword) => {\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .get(\r\n        \"/customers/other-servers\",\r\n        { params: { ...option, id: id, page: page, keyword: keyword } }\r\n      )\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const deleteServersOfCustomerApi = (deletedServers, customerId) => {\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .put(\r\n        \"/customers/servers\" + `?Id=${customerId}`,\r\n        { params: { DeletedServers: deletedServers } }\r\n      )\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n\r\nexport const addServersForCustomerApi = (addedServers, customerId) => {\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const token = checkToken();\r\n    return axios\r\n      .post(\r\n        \"/customers/servers\" + `?Id=${customerId}`,\r\n        { params: { AddedServers: addedServers } }\r\n      )\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const exportCustomerListApi = (data) => {\r\n  return new Promise((resolve, reject) => {\r\n    return axios\r\n      .get(`/customers/export`, {\r\n        params: {\r\n          CustomerName: data.customerName,\r\n          ContactPoint: data.contactPoint,\r\n          ContractBeginDate: data.startDate,\r\n          ContractEndDate: data.endDate,\r\n          IsActive: data.status\r\n        }\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport const importCustomerListApi = (data) => {\r\n\r\n  return new Promise((resolve, reject) => {\r\n    return axios\r\n      .post(`/customers/import`, {\r\n        CustomerList: data.data\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  getContactPointsApi,\r\n  getCustomerApi,\r\n  getServersCustomerApi,\r\n  getOtherServersApi,\r\n  deleteServersOfCustomerApi,\r\n  addServersForCustomerApi,\r\n} from \"api/customer\";\r\nimport { loading } from \"features/App/slice\";\r\n\r\nexport const initialState = {\r\n  data: [],\r\n  deletedData: [],\r\n  servers: { data: [], loading: false, hasMore: true, total: 0 },\r\n  totalServers: 0,\r\n  otherServers: { data: [], loading: false, hasMore: true, total: 0 },\r\n  pagination: {\r\n    total: 0,\r\n    current: 1,\r\n    pageSize: 10,\r\n  },\r\n  deletedOwnedServers: [],\r\n  addedServers: [],\r\n  sortColumn: \"CreatedDate\",\r\n  sortOrder: \"descend\",\r\n  keyword: \"\",\r\n  filterValue: [],\r\n  refresh: false,\r\n  contactPoints: [],\r\n  loading: false,\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"customerManagement\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    setData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n\r\n    setPagination: (state, action) => {\r\n      state.pagination = action.payload;\r\n    },\r\n\r\n    setSort: (state, action) => {\r\n      state.sortColumn = action.payload.sortColumn;\r\n      state.sortOrder = action.payload.sortOrder;\r\n    },\r\n\r\n    setSearch: (state, action) => {\r\n      state.keyword = action.payload;\r\n    },\r\n\r\n    setFilter: (state, action) => {\r\n      state.filterValue = action.payload;\r\n    },\r\n\r\n    setRefresh: (state, action) => {\r\n      state.refresh = action.payload;\r\n    },\r\n\r\n    setContactPointList: (state, action) => {\r\n      state.contactPoints = action.payload;\r\n    },\r\n\r\n    setServers: (state, action) => {\r\n      state.servers = action.payload;\r\n    },\r\n\r\n    setOtherServers: (state, action) => {\r\n      state.otherServers = action.payload;\r\n    },\r\n\r\n    setDeletedOwnedServers: (state, action) => {\r\n      state.deletedOwnedServers = action.payload;\r\n    },\r\n\r\n    setAddedServers: (state, action) => {\r\n      state.addedServers = action.payload;\r\n    },\r\n\r\n    setLoading: (state, action) => {\r\n      state.loading = action.payload;\r\n    },\r\n\r\n    setDeletedData: (state, action) => {\r\n      state.deletedData = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setFilter,\r\n  setData,\r\n  setPagination,\r\n  setSort,\r\n  setSearch,\r\n  setRefresh,\r\n  setContactPointList,\r\n  setServers,\r\n  setOtherServers,\r\n  setDeletedOwnedServers,\r\n  setAddedServers,\r\n  setLoading,\r\n  setDeletedData,\r\n} = slice.actions;\r\nexport default slice.reducer;\r\n\r\nexport const getCustomerList = (params = {}) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    return getCustomerApi(params)\r\n      .then((res) => {\r\n        dispatch(setData(res));\r\n        dispatch(\r\n          setPagination({\r\n            current: res[0] ? params.current : 0,\r\n            total: res[0] ? res[0].Total : 0,\r\n            pageSize: params.pageSize,\r\n          })\r\n        );\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const getContactPointList = () => (dispatch) => {\r\n  getContactPointsApi().then((res) => {\r\n    dispatch(setContactPointList(res));\r\n  });\r\n};\r\n\r\nexport const getServersCustomer = (id, keyword) => (dispatch, getState) => {\r\n  dispatch(\r\n    setServers({\r\n      data: [],\r\n      hasMore: true,\r\n      loading: true,\r\n    })\r\n  );\r\n  return new Promise((resolve, reject) => {\r\n    return getServersCustomerApi(id, keyword)\r\n      .then((res) => {\r\n        dispatch(\r\n          setServers({\r\n            data: res,\r\n            hasMore: false,\r\n            loading: false,\r\n            total: res.length,\r\n          })\r\n        );\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        reject();\r\n      });\r\n  });\r\n};\r\n\r\nexport const getOtherServers = (option, id, page, keyword) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  return new Promise((resolve, reject) => {\r\n    return getOtherServersApi(option, id, page, keyword)\r\n      .then((res) => {\r\n        dispatch(\r\n          setOtherServers({\r\n            data: getState().customerManagement.otherServers.data.concat(res),\r\n            hasMore: res.length > 0,\r\n            loading: false,\r\n            total: res.length > 0 ? res[0].Total : 0,\r\n          })\r\n        );\r\n\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        reject();\r\n      });\r\n  });\r\n};\r\n\r\nexport const deleteServersOfCustomer = (deletedServers, customerId) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  return new Promise((resolve, reject) => {\r\n    return deleteServersOfCustomerApi(deletedServers, customerId)\r\n      .then((res) => {\r\n        dispatch(setDeletedOwnedServers([]));\r\n        dispatch(setRefresh(!getState().customerManagement.refresh));\r\n\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        reject();\r\n      });\r\n  });\r\n};\r\n\r\nexport const addServersForCustomer = (addedServers, customerId) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  return new Promise((resolve, reject) => {\r\n    return addServersForCustomerApi(addedServers, customerId)\r\n      .then((res) => {\r\n        dispatch(setAddedServers([]));\r\n        dispatch(setRefresh(!getState().customerManagement.refresh));\r\n\r\n        resolve();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        reject();\r\n      });\r\n  });\r\n};\r\n"],"sourceRoot":""}